name: Create and Publish Release

on:
  workflow_dispatch:
    inputs:
      release_notes:
        description: 'Optional custom release notes to add to the release body.'
        required: false
        type: string
  push:
    branches:
      - master

  pull_request:
    types:
      - closed
    branches:
      - master

jobs:
  release-and-publish:
    name: Release and Publish
    if: |
        github.event_name == 'workflow_dispatch' ||
        (github.event_name == 'push' && contains(github.event.head_commit.message, '[RELEASE]')) || github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository history
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Set up JDK 17 and cache Maven dependencies
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Extract project version from pom.xml
        id: get_version
        run: |
          echo "version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> "$GITHUB_OUTPUT"

      - name: Build project with Maven
        run: mvn clean package -DskipTests -B

      - name: Create and push Git tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "Release v${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"


      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
            tag: v${{ steps.get_version.outputs.version }}
            name: Release ${{ steps.get_version.outputs.version }}
            body: ${{ github.event.inputs.release_notes || format('Official release of version {0}.\n\nThe attached JAR file contains the compiled application and all dependencies.', steps.get_version.outputs.version) }}
            artifacts: ./target/collaborator-${{ steps.get_version.outputs.version }}-jar-with-dependencies.jar
